# # Laguerre-Gauss profile

struct LaguerreGaussLaserConstantCache{IC,W,K,T,Z,E,I,N}
    inv_c::IC
    œâ::W
    k::K
    T‚ÇÄ::T
    z_R::Z
    E‚ÇÄ::E
    m‚Çê::I
    N‚Çö‚Çò::N
end

function LaguerreGaussLaserConstantCache(;c, Œª, w‚ÇÄ, a‚ÇÄ, m‚Çë, q, p, m)
    œâ = 2œÄ * c / Œª
    k = 2œÄ / Œª
    T = 2œÄ / œâ
    z_R = w‚ÇÄ^2 * k / 2
    E‚ÇÄ = a‚ÇÄ * m‚Çë * c * œâ / abs(q)
    m‚Çê = abs(m)
    N‚Çö‚Çò = ‚àö(pochhammer(p+1, m‚Çê))

    return LaguerreGaussLaserConstantCache(inv(c), œâ, k, T, z_R, E‚ÇÄ, m‚Çê, N‚Çö‚Çò)
end

@auto_hash_equals mutable struct LaguerreGaussLaserCache{L,S,CE,EE}
    x::L
    y::L
    œÉ::S
    wz::L
    Ex::CE
    Ey::CE
    Ez::CE
    Eg::CE
    NEgexp::EE
    rwz::S
end

function LaguerreGaussLaserCache(Œª, E)
    ThreadLocal(LaguerreGaussLaserCache(
        zero(Œª),                    # x
        zero(Œª),                    # y
        zero(Œª/Œª),                  # œÉ
        zero(Œª),                    # wz
        zero(E*im),                 # Ex
        zero(E*im),                 # Ey
        zero(E*im),                 # Ez
        zero(E*im),                 # Eg
        zero(E*im),                 # NEgexp
        zero(Œª/Œª),                  # rwz
    ))
end


function Base.fill!(cache::LaguerreGaussLaserCache, x::AbstractVector)
    cache.x = x[1]
    cache.y = x[2]

    return nothing
end

@doc """
    struct LaguerreGaussLaser <: AbstractLaser

The `LaguerreGaussLaser` is defined by the `units` of the laser
(a positional argument that can be `:SI`, `:atomic` or `:SI_unitful` and `:atomic_unitful`)
and the following parameters
- `Œª` is the laser wavelangth
- `a‚ÇÄ` is the normalized vector potential (defined as ``a_0=\\frac{eA}{m_e c^2}``)
- `œï‚ÇÄ` is the initial phase with the default value 0.0
- `w‚ÇÄ` is the beam radius at the Rayleigh range or [beam waist](https://en.wikipedia.org/wiki/Gaussian_beam#Beam_waist)
- `Œæx` and `Œæy` give the polarization and have the default value `1.0 + 0im` and `0.0 + 0im`
- `orientation` specifies how the laser is oriented with respect to the
default coordinate system (default `(:x, :z)`). See [`LaserGeometry`](@ref) for more details.
- `propagation_dir` is the propagation direction of the wave in the
intrinsic coordinate system (default `:z`). See [`LaserGeometry`](@ref) for more details.
- `profile` is the temporal profile of the pulse and the default one is constant (infinite pules duration)
- `p` is the radial index of the mode, ``p ‚àà ‚Ñ§, p ‚â• 0``, with the default value 1
- `m` is the azimuthal index of the mode, ``m ‚àà ‚Ñ§``, with the default value 0

During the initialization of the `LaguerreGaussLaser` type, some useful derived values are
also computed
- `œâ` is the angular frequency and is given by ``2œÄ c / Œª``
- `k` is the wavenumber and is given by ``2œÄ / Œª``
- `z_R` is the [Rayleigh range](https://en.wikipedia.org/wiki/Rayleigh_length) and is given by ``k w_0^2 / 2``
- `T‚ÇÄ` is the laser period and is given by ``2œÄ / œâ``
- `E‚ÇÄ` is the amplitude of the electric field and is given by ``a_0\\frac{m_q c \\omega}{q}``
- `N‚Çö‚Çò` is a normalization factor given by ``\\sqrt{(p+1)_{|m|}}``, with ``(x)_n`` the [Pochhammer symbol](https://mathworld.wolfram.com/PochhammerSymbol.html)
"""
LaguerreGaussLaser

struct LaguerreGaussLaser{_P,_M,
                          C0,Q,M,Eps,Mu,U,
                          IC,W,K,T,Z,E,I,F,
                          L,S,CE,EE,
                          D,R,
                          C,
                          P} <: AbstractLaser
    constants::FundamentalConstants{C0,Q,M,Eps,Mu,U}
    derived::LaguerreGaussLaserConstantCache{IC,W,K,T,Z,E,I,F}
    cache::ThreadLocal{LaguerreGaussLaserCache{L,S,CE,EE}}
    geometry::LaserGeometry{D,R}
    polarization::LaserPolarization{C}
    profile::P
    # laser parameters
    Œª::L
    a‚ÇÄ::F
    œï‚ÇÄ::F
    w‚ÇÄ::L
    p::I
    m::I
end

# This hack stores the m and p values in the type domain
function LaguerreGaussLaser(
    constants::FundamentalConstants{C0,Q,M,Eps,Mu,U},
    derived::LaguerreGaussLaserConstantCache{IC,W,K,T,Z,E,I,F},
    cache::ThreadLocal{LaguerreGaussLaserCache{L,S,CE,EE}},
    geometry::LaserGeometry{D,R},
    polarization::LaserPolarization{C},
    profile::P,
    Œª::L,
    a‚ÇÄ::F,
    œï‚ÇÄ::F,
    w‚ÇÄ::L,
    p::I,
    m::I
) where {C0,Q,M,Eps,Mu,U,
         IC,W,K,T,Z,E,I,F,
         L,S,CE,EE,
         D,R,
         C,
         P}
    LaguerreGaussLaser{Val{p},Val{m},
                       C0,Q,M,Eps,Mu,U,
                       IC,W,K,T,Z,E,I,F,
                       L,S,CE,EE,
                       D,R,
                       C,
                       P}(
        constants,
        derived,
        cache,
        geometry,
        polarization,
        profile,
        Œª,
        a‚ÇÄ,
        œï‚ÇÄ,
        w‚ÇÄ,
        p,
        m
    )
end

function LaguerreGaussLaser(units;
        Œª,
        a‚ÇÄ,
        œï‚ÇÄ = 0.0,
        w‚ÇÄ,
        p = 1,
        m = 0,
        Œæx = 1.0+0im,
        Œæy = 0,
        orientation = (:x, :z),
        profile = ConstantProfile()
    )

    Œæx, Œæy = promote(Œæx, Œæy)
    a‚ÇÄ, œï‚ÇÄ = promote(a‚ÇÄ, œï‚ÇÄ)
    Œª, w‚ÇÄ = promote(Œª, w‚ÇÄ)
    @assert hypot(Œæx, Œæy) ‚âà 1 "Invalid Œæx and Œæy"
    constants = FundamentalConstants(units)
    @unpack m‚Çë, c, q = constants

    derived = LaguerreGaussLaserConstantCache(; c, Œª, w‚ÇÄ, a‚ÇÄ, m‚Çë, q, p, m)
    E‚ÇÄ = derived.E‚ÇÄ

    cache = LaguerreGaussLaserCache(Œª, E‚ÇÄ)

    geometry = LaserGeometry(orientation)

    polarization = LaserPolarization(Œæx, Œæy)

    return LaguerreGaussLaser(
        constants,
        derived,
        cache,
        geometry,
        polarization,
        profile,
        Œª,
        a‚ÇÄ,
        œï‚ÇÄ,
        w‚ÇÄ,
        p,
        m
    )
end

"""
    convert_laser(::Type{GaussLaser}, laser::LaguerreGaussLaser)

Convert a `LaguerreGaussLaser` to a `GaussLaser` with similar parameters.
"""
function convert_laser(::Type{GaussLaser}, laser::LaguerreGaussLaser)
    @unpack constants, geometry, profile, Œª, a‚ÇÄ, w‚ÇÄ = laser

    derived = GaussLaserConstantCache(;
        constants.c,
        Œª,
        w‚ÇÄ,
        a‚ÇÄ,
        constants.m‚Çë,
        constants.q)
    # E‚ÇÄ = derived.E‚ÇÄ

    # Don't create a cache since it's not used and it allocates memory
    cache = nothing # GaussLaserCache(Œª, E‚ÇÄ)

    polarization = LaserPolarization(1, 0)

    GaussLaser(
        constants,
        derived,
        cache,
        geometry,
        polarization,
        profile,
        Œª,
        a‚ÇÄ,
        zero(a‚ÇÄ),
        w‚ÇÄ
    )
end

get_p(::Type{<:LaguerreGaussLaser{Val{P},Val{M}}}) where {P,M} = P
get_m(::Type{<:LaguerreGaussLaser{Val{P},Val{M}}}) where {P,M} = M

function required_coords(::LaguerreGaussLaser, r)
    CylindricalFromCartesian()(r)
end

function Ex(laser::LaguerreGaussLaser, coords)
    @unpack N‚Çö‚Çò, z_R, m‚Çê = immutable_cache(laser)
    Œæx = polarization(laser, :Œæx)
    @unpack œï‚ÇÄ, p, m, cache = laser
    @unpack r, Œ∏, z = coords

    gauss_laser = convert_laser(GaussLaser, laser)
    Eg = Ex(gauss_laser, coords)
    # We avoid computing wz in the GaussLaser call so that we can skip cache creation
    wz = w(z, laser)
    œÉ = (r/wz)^2
    rwz = ustrip(NoUnits, r*‚àö2/wz)
    @pack! cache[] = Eg, wz, œÉ, rwz

    Œæx * Eg * N‚Çö‚Çò * rwz^m‚Çê * _‚ÇÅF‚ÇÅ(-p, m‚Çê+1, 2œÉ) * exp(im*((2p+m‚Çê)*atan(z, z_R) - m*Œ∏ + œï‚ÇÄ))
end

function Ez(laser::LaguerreGaussLaser, coords)
    @unpack N‚Çö‚Çò, m‚Çê, k, z_R = immutable_cache(laser)
    @unpack wz, rwz, œÉ, Eg, Ex, Ey, x, y = mutable_cache(laser)
    @unpack Œæx, Œæy = polarization(laser)
    @unpack œï‚ÇÄ, p, m = laser
    @unpack r, Œ∏, z = coords

    P = get_p(typeof(laser))
    M = get_m(typeof(laser))

    sgn = sign(m)
    ùüò = zero(typeof(Ex))/oneunit(typeof(x))
    NEgexp = N‚Çö‚Çò*Eg*exp(im*((2p+m‚Çê)*atan(z, z_R)-m*Œ∏+œï‚ÇÄ))
    update_cache!(laser, :NEgexp, NEgexp)

    -im/k * (
       (iszero(M) ? ùüò : m‚Çê * (Œæx - im*sgn*Œæy) * (‚àö2/wz)^m‚Çê * r^(m‚Çê-1) * _‚ÇÅF‚ÇÅ(-p, m‚Çê+1, 2œÉ) * NEgexp * exp(im*sgn*Œ∏))
     - 2/(wz^2) * (1 + im*z/z_R) * (x*Ex + y*Ey)
     - (iszero(P) ? ùüò : 4p/((m‚Çê+1) * wz^2) * (x*Œæx + y*Œæy) * rwz^m‚Çê * _‚ÇÅF‚ÇÅ(-p+1, m‚Çê+2, 2œÉ) * NEgexp)
    )
end

function Bz(laser::LaguerreGaussLaser, coords)
    @unpack œâ, z_R = immutable_cache(laser)
    @unpack wz, m‚Çê, œÉ, Ex, Ey, NEgexp, x, y = mutable_cache(laser)
    @unpack Œæx, Œæy = polarization(laser)
    @unpack p, m = laser
    @unpack r, Œ∏, z = coords

    sgn = sign(m)
    ùüò = zero(typeof(Ex))/oneunit(typeof(x))

    -im/œâ * (
       - (iszero(m) ? ùüò : m‚Çê * (Œæy + im*sgn*Œæx) * (‚àö2/wz)^m‚Çê*r^(m‚Çê-1) * _‚ÇÅF‚ÇÅ(-p, m‚Çê+1, 2œÉ) * NEgexp * exp(im*sgn*Œ∏))
       + 2/(wz^2) * (1 + im*z/z_R) * (x*Ey - y*Ex)
       + (iszero(p) ? ùüò : (4p)/((m‚Çê+1) * wz^2) * (x*Œæy - y*Œæx) * (r*‚àö2/wz)^m‚Çê * _‚ÇÅF‚ÇÅ(-p+1, m‚Çê+2, 2œÉ) * NEgexp)
    )
end
